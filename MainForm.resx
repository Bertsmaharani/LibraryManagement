<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>